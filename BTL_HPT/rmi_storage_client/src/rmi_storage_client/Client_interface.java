 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rmi_storage_client;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import rmi_storage_server.FileServer;
import rmi_storage_server.FileServerInt;

/**
 *
 * @author robot
 */
public class Client_interface extends javax.swing.JFrame {

    /**
     * Creates new form Client_interface
     */
    private FileClientInt client;
    private FileServerInt server;
    private final String path;
    private boolean isDone = false;
    private InputStream is = null;
    private OutputStream os = null;
    private String stateSynchronization = "";
    private String current_path = "";
    private Synchronization sync;
    private String UserName = "";

    public Client_interface(final String path, FileClientInt client, FileServerInt server, String userName) throws RemoteException {
        this.UserName = userName;
        this.path = path;
        this.current_path = path;
        this.client = client;
        this.server = server;
        initComponents();
        initTime();
        //startSync();
    }

    public void updateTable(String path) {
        Vector col = new Vector();
        col.add("Loại");
        col.add("Tên");
        col.add("Kích thươc");
        col.add("Ngày cập nhật");
        col.add("Đường dẫn");
        Vector data = new Vector();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        File f = new File(path);
        File[] allSubFiles = f.listFiles();
        for (File file : allSubFiles) {
            Vector element = new Vector();
            if (file.isDirectory()) {
                element.addElement("forder");
                element.addElement(file.getName());
                element.addElement(file.length());
                element.addElement(sdf.format(file.lastModified()));
                element.addElement(file.getPath());
            } else {
                element.addElement("file");
                element.addElement(file.getName());
                element.addElement(file.length());
                element.addElement(sdf.format(file.lastModified()));
                element.addElement(file.getPath());
            }
            data.add(element);
        }
        TBhienthi.setModel(new DefaultTableModel(data, col));
    }

    public boolean deleteFile(File delFile) {
        if (delFile.isDirectory()) {
            if (delFile.list().length == 0) {
                delFile.delete();
                return true;
            } else {
                File[] allSubFiles = delFile.listFiles();
                for (File file : allSubFiles) {
                    if (file.isDirectory()) {
                        deleteFile(file);
                    } else {
                        file.delete();
                    }
                }
            }
        } else {
            delFile.delete();
            return true;
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BTsynchronization = new javax.swing.JButton();
        BTtaofile = new javax.swing.JButton();
        BTtaothumuc = new javax.swing.JButton();
        BTxoa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TBhienthi = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BTsynchronization.setText("BẮT ĐẦU ĐỒNG BỘ");
        BTsynchronization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTsynchronizationActionPerformed(evt);
            }
        });

        BTtaofile.setText("TẠO FILE");
        BTtaofile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTtaofileActionPerformed(evt);
            }
        });

        BTtaothumuc.setText("TẠO FORDER");
        BTtaothumuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTtaothumucActionPerformed(evt);
            }
        });

        BTxoa.setText("XÓA");
        BTxoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTxoaActionPerformed(evt);
            }
        });

        TBhienthi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Loại", "Tên", "Ngày cập nhật", "Kích thước ", "Đường dẫn"
            }
        ));
        jScrollPane1.setViewportView(TBhienthi);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addComponent(BTsynchronization, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BTtaofile, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTtaothumuc, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTxoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BTsynchronization)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTtaofile)
                    .addComponent(BTtaothumuc)
                    .addComponent(BTxoa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initTime() {
        Timer timer = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateTable(current_path);
            }
        });
        timer.start();
    }


    private void BTtaothumucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTtaothumucActionPerformed
        String Nameforder = JOptionPane.showInputDialog(null, "tên thư mục cần tạo:");
        File f;
        if (System.getProperty("os.name").equalsIgnoreCase("linux")) {
            f = new File(current_path + "/" + Nameforder);
        } else {
            f = new File(current_path + "\\" + Nameforder);
        }
        if (f.exists()) {
            JOptionPane.showMessageDialog(null, "Forder này đã tồn tại");
        } else {
            if (f.mkdir()) {
                updateTable(current_path);
            } else {
                JOptionPane.showMessageDialog(null, "Lỗi trong quá trình tạo forder");
            }
        }
    }//GEN-LAST:event_BTtaothumucActionPerformed

    private void BTtaofileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTtaofileActionPerformed
        String NameFile = JOptionPane.showInputDialog(null, "Tên file cần tạo");
        File f;
        if (System.getProperty("os.name").equalsIgnoreCase("linux")) {
            f = new File(current_path + "/" + NameFile);
        } else {
            f = new File(current_path + "\\" + NameFile);
        }
        if (f.exists()) {
            JOptionPane.showMessageDialog(null, "Forder này đã tồn tại");
        } else {
            try {
                if (f.createNewFile()) {
                    updateTable(current_path);
                } else {
                    JOptionPane.showMessageDialog(null, "Lỗi trong quá trình tạo forder");
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_BTtaofileActionPerformed

    private void BTsynchronizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTsynchronizationActionPerformed
        try {
            if (isDone || BTsynchronization.getText().equalsIgnoreCase("dừng đồng bộ")) {
                stopSync();
                BTsynchronization.setText("BẮT ĐẦU ĐỒNG BỘ");
            } else if (!isDone || BTsynchronization.getText().equalsIgnoreCase("bắt đầu đồng bộ")) {
                startSync();
                BTsynchronization.setText("DỪNG ĐỒNG BỘ");
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_BTsynchronizationActionPerformed

    private void BTxoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTxoaActionPerformed
        int row = TBhienthi.getSelectedRow();
        if (row > -1) {
            String type = (String) TBhienthi.getValueAt(row, 0);
            if (type.equalsIgnoreCase("file")) {
                String pathfile = (String) TBhienthi.getValueAt(row, 4);
                File delFile = new File(pathfile);
                delFile.delete();
                updateTable(current_path);
            } else {
                String pathForder = (String) TBhienthi.getValueAt(row, 4);
                File delForder = new File(pathForder);
                deleteFile(delForder);
                delForder.delete();
                updateTable(current_path);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Bạn cần chọn 1 mục trong bảng để xóa");
        }
    }//GEN-LAST:event_BTxoaActionPerformed

    public String getPath(String currentpath) {
        int endIndex = 0;
        for (int i = currentpath.length() - 1; i >= 0; i--) {
            if ((int) currentpath.charAt(i) == 92) {
                endIndex = i;
                break;  
            }
        }
        String checkpath = currentpath.substring(0, endIndex);
        return checkpath;
    }

    private void startSync() throws RemoteException {
        server.synchronous(client);
        File clientfile = new File(path);
        File serverfile = server.getServerFile();
        sync = new Synchronization(client, server, serverfile, clientfile, isDone, this.UserName);
        new Thread(sync).start();
    }

    private void stopSync() throws RemoteException {
        sync.stopSync();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTsynchronization;
    private javax.swing.JButton BTtaofile;
    private javax.swing.JButton BTtaothumuc;
    private javax.swing.JButton BTxoa;
    private javax.swing.JTable TBhienthi;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
